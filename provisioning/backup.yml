---
- name: Playbook to backup databases and blobstore to Amazon S3.
  hosts: nexus
  gather_facts: true  # Needed for all the "ansible_*" facts that we use.
  become: true

  vars:
    wanted_pattern: "Task 'db.backup' [db.backup] state change RUNNING -> WAITING (OK)"

  roles:
    - role: ansible-duply-backup
      tags: [ duply ]

  tasks:
    - name: Install pip Python package manager, updating the cache first, if needed.
      apt:
        name: python-pip
        state: latest
        update_cache: yes
        cache_valid_time: 3600  # Update cache if it's been over an hour since the last update.

    - name: Install 'boto' Python package.
      pip: name=boto state=latest  # Required by 's3_bucket' module and the duplicity S3 backend.

    - name: Ensure '{{ nexus_backup_dir }}' exists and is empty.
      file:
        path: "{{ nexus_backup_dir }}"
        owner: "{{ nexus_os_user }}"
        group: "{{ nexus_os_group }}"
        mode: 0755
        state: "{{ item }}"
      with_items: [ absent, directory ]  # Will delete old backups, if they exist.

    # See https://stackoverflow.com/a/41209087/3874643
    - name: Retrieve the last line in '{{ nexus_log }}'.
      command: tail -n 1 {{ nexus_log }}
      register: tail_output
      changed_when: false  # Task is purely informational.

    - name: Escape the log's last line and our wanted pattern so that they are suitable for use in a regular expression.
      set_fact:
        last_line_escaped: "{{ tail_output.stdout | regex_escape() }}"
        wanted_pattern_escaped: "{{ wanted_pattern | regex_escape() }}"

    - name: Run database backup task.  # Backup files will be written to 'nexus_backup_dir'.
      uri:
        url: "{{ rest_api_endpoint }}/tasks/run"
        user: 'admin'
        password: "{{ nexus_admin_password }}"
        headers:
          Content-Type: "text/plain"
        method: POST
        status_code: 200,204
        force_basic_auth: yes
        body: "{{ args | to_json }}"
        return_content: yes
      vars:
        args:
          methodName: run
          methodArgs:
            name: db.backup
      register: webpage
      failed_when: "'CHANGED' not in webpage.content"
      changed_when: true  # Always creates new files in 'nexus_backup_dir'.

    - name: Wait for database backup task to finish.
      wait_for:
        path: "{{ nexus_log }}"
        search_regex: "{{ last_line_escaped }}\n(.*\n)*.*{{ wanted_pattern_escaped }}"
        timeout: 30

    - name: Create S3 bucket to store our backups.
      s3_bucket:
        name: "{{ unidata_backups_bucket }}"
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"

    - name: Create new backup in S3 and purge any existing backups that are too old.
      command: duply nexus backup_purge
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
