---
- name: Playbook to restore databases and blobstore from Amazon S3.
  hosts: nexus
  gather_facts: true  # Needed for all the "ansible_*" facts that we use.
  become: true

  vars:
    wanted_pattern: "NexusLifecycleManager - Stop KERNEL"

  roles:
    - role: ansible-duply-backup
      tags: [ duply ]

  tasks:
    - name: Install pip Python package manager, updating the cache first, if needed.
      apt:
        name: python-pip
        state: latest
        update_cache: yes
        cache_valid_time: 3600  # Update cache if it's been over an hour since the last update.

    - name: Install 'boto' Python package.
      pip: name=boto state=latest  # Required by the duplicity S3 backend.

    # See https://stackoverflow.com/a/41209087/3874643
    - name: Retrieve the last line in '{{ nexus_log }}'.
      command: tail -n 1 {{ nexus_log }}
      register: tail_output
      changed_when: false  # Task is purely informational.

    - name: Escape the log's last line and our wanted pattern so that they are suitable for use in a regular expression.
      set_fact:
        last_line_escaped: "{{ tail_output.stdout | regex_escape() }}"
        wanted_pattern_escaped: "{{ wanted_pattern | regex_escape() }}"

    - name: Stop Nexus service.
      service: name=nexus state=stopped
      register: service_result

    - name: Wait for Nexus service to stop.
      wait_for:
        path: "{{ nexus_log }}"
        search_regex: "{{ last_line_escaped }}\n(.*\n)*.*{{ wanted_pattern_escaped }}"
        timeout: 30
      when: service_result.changed  # Only wait for service to stop if it's not already stopped.

    - name: Get status of 'db' directory.
      stat: path={{ nexus_data_dir }}/db
      register: db_stat

    - block:
        - name: Delete existing local backup of 'db', if it exists.
          file: path={{ nexus_data_dir }}/db-old state=absent

        - name: Move 'db' to 'db-old'.
          command: mv {{ nexus_data_dir }}/db {{ nexus_data_dir }}/db-old
      when: db_stat.stat.exists  # 'db' directory exists.

    # Below we're repeating the last three tasks, but replacing the string 'db' with 'blobs'.
    # That sounds ripe for a block/with_items construct, but it turns out that Ansible lacks that feature.
    # So, we must repeat ourselves. See https://github.com/ansible/ansible/issues/13262.

    - name: Get status of 'blobs' directory.
      stat: path={{ nexus_data_dir }}/blobs
      register: blobs_stat

    - block:
        - name: Delete existing local backup of 'blobs', if it exists.
          file: path={{ nexus_data_dir }}/blobs-old state=absent

        - name: Move 'blobs' to 'blobs-old'.
          command: mv {{ nexus_data_dir }}/blobs {{ nexus_data_dir }}/blobs-old
      when: blobs_stat.stat.exists  # 'blobs' directory exists.

    - name: Restore Nexus application data from S3 backup.
      command: duply nexus restore {{ duply_backup_profiles.nexus.conf.source }} --force
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"

    - name: Ensure '{{ nexus_data_dir }}/backup' exists and is empty.
      file:
        path: "{{ nexus_data_dir }}/backup"
        owner: "{{ nexus_os_user }}"
        group: "{{ nexus_os_group }}"
        mode: 0755
        state: "{{ item }}"
      with_items: [ absent, directory ]  # Will delete any files that were part of a previous restoration.

    - name: Move db backup files from '{{ nexus_backup_dir }}' to '{{ nexus_data_dir }}/backup'.
      shell: mv {{ nexus_backup_dir }}/* {{ nexus_data_dir }}/backup

    - name: Start Nexus service.
      service: name=nexus state=started

    - name: Wait for Nexus to be ready. Could take over a minute on Docker.
      wait_for: "port={{ nexus_default_port }} timeout=120"
